
@model SpecificsRightsVM

@{
}
<div class="nav nav-tabs nav-fill mb-3" id="nav-tab" role="tablist">
    @*<a class="nav-item nav-link active" id="nav-rights-tab-0" data-toggle="tab" href="#nav-rights" role="tab" aria-controls="nav-rights" onclick="FilterDataTableByEnvId(0)" hidden>Tous</a>*@

    @foreach (EnvironnementVM environnement in ViewBag.ListEnvironnement)
    {
        <a class="nav-item nav-link envMenu" id="nav-rights-tab-@environnement.Id" data-toggle="tab" href="#nav-rights" role="tab" aria-controls="nav-rights" onclick="FilterDataTableByEnvId(@environnement.Id)">@environnement.Label</a>
    }
</div>
<div>
    Accès rapide pour donner les droits :
    <button type="button" class="btn btn-outline-primary" onclick="CheckGrid('all')">Complet</button>
    <button type="button" class="btn btn-outline-primary" onclick="CheckGrid('readClass')">Lecture</button>
    <button type="button" class="btn btn-outline-primary" onclick="CheckGrid('writeClass')">Ecriture</button>
    <button type="button" class="btn btn-outline-primary" onclick="CheckGrid('deleteClass')">Suppression</button>
    <button type="button" class="btn btn-outline-primary" onclick="CheckGrid('cloneClass')">Clonage</button>
</div>
<div class="tab-pane fade show active" id="nav-rights" role="tabpanel" aria-labelledby="nav-general-tab">
    <!-- Ajout tableau-->
    <table id="SetRightsDatatable" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
        <thead>
            <tr>
                <th>Id</th>
                <th>Role</th>
                <th>Lecture</th>
                <th>Ecriture</th>
                <th>Suppression</th>
                <th>Clonage</th>
                <th>IdEnvironnement</th>
            </tr>
        </thead>
    </table>
</div>

<script type="text/javascript">

    var datatable;
    $(document).ready(function () {
     datatable = $("#SetRightsDatatable").DataTable({
            "language": {
                url: '//cdn.datatables.net/plug-ins/1.10.24/i18n/French.json'
         },
         "lengthMenu": [[-1],["Tous"]],
            "processing": true, // for show progress bar
            "filter": true, // this is for disable filter (search box)
            "ajax": {
                "url": "@Url.Action("GetListRights", "Rights")?idRole=@ViewBag.IdRole",
                "type": "GET",
                "datatype": "json"
            },
            "columnDefs": [{
                "targets": [0],
                "visible": false,
                "searchable": false
            },
            {
                "targets": [1],
                "sorting": true,
                "searchable": true

            },
            {
                "targets": [2],
                "sorting": false,
                "searchable": false
            },
            {
                "targets": [3],
                "sorting": false,
                "searchable": false
            },
            {
                "targets": [4],
                "sorting": false,
                "searchable": false
            },
            {
                "targets": [5],
                "sorting": false,
                "searchable": false
            },
            {
                "targets": [6],
                "visible": false,
                "searchable": true
            },
            ],
            "columns": [
                { "data": "id", name: "Id", "autoWidth": true },
                { "data": "metaEntityTypeString", name: "MetaEntityTypeString", "autoWidth": true },
                {
                    data: "canRead",
                    name: "canRead",
                    render: function (data, type, row, meta) {
                        if (type === 'display') {
                            let checked = '';
                            if (data == true) checked = 'checked';
                            return '<input type="checkbox" class="editor-active readClass readClass ' + meta.row + "-" + meta.col + '"  ' + checked + '>';
                        }
                        return data;
                    },
                    className: "dt-body-center"
                },
                {
                    data: "canWrite",
                    name: "canWrite",
                    render: function (data, type, row, meta) {
                        if (type === 'display') {
                            let checked = '';
                            if (data == true) checked = 'checked';
                            return '<input type="checkbox" class="editor-active writeClass writeClass ' + meta.row + "-" + meta.col + '"  ' + checked + '>';
                        }
                        return data;
                    },
                    className: "dt-body-center"
                },
                {
                    data: "canDelete",
                    name: "canDelete",
                    render: function (data, type, row, meta) {
                        if (type === 'display') {
                            let checked = '';
                            if (data == true) checked = 'checked';
                            return '<input type="checkbox" class="editor-active deleteClass deleteClass ' + meta.row + "-" + meta.col + '"   ' + checked + '>';
                        }
                        return data;
                    },
                    className: "dt-body-center"
                },
                {
                    data: "canClone",
                    name: "canClone",
                    render: function (data, type, row, meta) {
                        if (type === 'display') {
                            let checked = '';
                            if (data == true) checked = 'checked';
                            return '<input type="checkbox" class="editor-active cloneClass ' + meta.row + "-"+ meta.col + '"  ' + checked + '>';
                        }
                        return data;
                    },
                    className: "dt-body-center"
                },
                { "data": "environnement.id", name: "Environnement.Id" },

         ]
     });
        //https://editor.datatables.net/examples/api/checkbox.html
        $('#SetRightsDatatable').on('change', 'input.editor-active', function () {

            var classList = this.className.split(/\s+/)
            let coords = classList[classList.length - 1].split('-');
            $('#SetRightsDatatable').DataTable().cell({ row: +coords[0], column: +coords[1] }).data($(this).is(':checked'));
            $(this).prop('checked', $(this).is(':checked'));
            if ($(this).is(':checked'))
                $(this).attr("checked", "checked");
            else
                $(this).removeAttr("checked");
        });

        $('.envMenu').first().click(); //TODO: A supprimer après les tests
    });

    function FilterDataTableByEnvId(envId) {
            datatable
                .column(6)
                .search(envId == 0 ? "" : envId)
                .draw();
    }

    function CheckGrid(selectedClass) {
        if (selectedClass == 'all') {
            $('.deleteClass, .cloneClass, .writeClass, .readClass').prop('checked', !$('.readClass').prop("checked"));
            $('.deleteClass, .cloneClass, .writeClass, .readClass').val(!$('.readClass').prop("checked"));
            $('.deleteClass, .cloneClass, .writeClass, .readClass').click();
            $('.deleteClass, .cloneClass, .writeClass, .readClass').click();
        }
        else {
            $('.' + selectedClass).prop('checked', !$('.' + selectedClass).prop("checked"));
            $('.' + selectedClass).val(!$('.' + selectedClass).prop("checked"));
            $('.' + selectedClass).click();
            $('.' + selectedClass).click();
        }
        
    }

</script>
